# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tG419VlrddB7IigpG2KWdyWpV1DbyNb0
"""

#!apt-get install graphviz
#!pip install graphviz

from graphviz import Digraph

def create_coderagagent_flowchart():
    # Create a directed graph
    dot = Digraph(comment='CodeRAGAgent Workflow')

    # Add nodes
    dot.node('A', 'Start')
    dot.node('B', 'Receive Query')
    dot.node('C', 'Initialize Variables\n(result=None, max_attempts=3, attempts=0)')
    dot.node('D', 'While result is None and attempts < max_attempts')
    dot.node('E', 'Call processor(query)\nGet Generated Code')
    dot.node('F', 'Execute Code\nexecute_code(code, self.df)')
    dot.node('G', 'Update Result')
    dot.node('H', 'Increment Attempts\n(attempts += 1)')
    dot.node('I', 'Return Result\n(code, result)')
    dot.node('J', 'End')

    # Add edges
    dot.edge('A', 'B')
    dot.edge('B', 'C')
    dot.edge('C', 'D')
    dot.edge('D', 'E', label='True')
    dot.edge('E', 'F')
    dot.edge('F', 'G')
    dot.edge('G', 'H')
    dot.edge('H', 'D')
    dot.edge('D', 'I', label='False')
    dot.edge('I', 'J')

    # Render the graph
    dot.render('coderagagent_workflow', format='png', cleanup=True)
    print("Flowchart saved as 'coderagagent_workflow.png'.")

#create_coderagagent_flowchart()

def create_interp_rag_agent_flowchart():
    # Create a directed graph
    dot = Digraph(comment='InterpRAGAgent Workflow')

    # Add nodes
    dot.node('A', 'Receive Context and Query')
    dot.node('B', 'Format Prompt')
    dot.node('C', 'Invoke Model to Generate Response')
    dot.node('D', 'Format Response')
    dot.node('E', 'Return Final Response')

    # Add edges
    dot.edges(['AB', 'BC', 'CD', 'DE'])

    # Render the graph
    dot.render('interpragagent_workflow', format='png', cleanup=True)

#create_interp_rag_agent_flowchart()

def create_retrieval_evaluator_flowchart():
    # Create a directed graph
    dot = Digraph(comment='RetrievalEvaluator Workflow')

    # Add nodes
    dot.node('A', 'Initialize with Retrieved and Relevant Documents')
    dot.node('B', 'Calculate Recall@k')
    dot.node('C', 'Calculate Mean Reciprocal Rank (MRR)')
    dot.node('D', 'Return Evaluation Metrics(Recall@k and MRR)')

    # Add edges
    dot.edges(['AB', 'AC', 'BD', 'CD'])

    # Render the graph
    dot.render('retrieval_evaluator_workflow', format='png', cleanup=True)

#create_retrieval_evaluator_flowchart()

def create_gener_code_evaluator_flowchart():
    # Create a directed graph
    dot = Digraph(comment='GenerCodeEvaluator Workflow')

    # Add nodes
    dot.node('A', 'Initialize with Generated and Reference Code')
    dot.node('B', 'Calculate Exact Match')
    dot.node('C', 'Calculate F1 Score')
    dot.node('D', 'Return Evaluation Metrics(EM and F1)')

    # Add edges
    dot.edges(['AB', 'AC', 'BD', 'CD'])

    # Render the graph
    dot.render('gener_code_evaluator_workflow', format='png', cleanup=True)


#create_gener_code_evaluator_flowchart()

def extract_code_flowchart():
    dot = Digraph(comment='Extract Code Workflow')

    dot.node('A', 'Start')
    dot.node('B', 'Check for valid Python code block')
    dot.node('C', 'Print error message and return None')
    dot.node('D', 'Find start and end positions of the code block')
    dot.node('E', 'Extract code and return')
    dot.node('F', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C', label='No')
    dot.edge('B', 'D', label='Yes')
    dot.edge('D', 'E')
    dot.edge('E', 'F')

    dot.render('extract_code_workflow', format='png', cleanup=True)
    print("Extract Code Workflow saved as 'extract_code_workflow.png'.")

def execute_code_flowchart():
    dot = Digraph(comment='Execute Code Workflow')

    dot.node('A', 'Start')
    dot.node('B', 'Extract code from response')
    dot.node('C', 'Create local namespace')
    dot.node('D', 'Try to execute code')
    dot.node('E', 'Return result')
    dot.node('F', 'Did AttributeError occur?')
    dot.node('G', 'Execute original code(the code that is not reset the index)')
    dot.node('H', 'Catch other exceptions')
    dot.node('I', 'Print error message and return None')
    dot.node('J', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C')
    dot.edge('C', 'D')
    dot.edge('D', 'E', label='Success')
    dot.edge('D', 'F', label='Failure')
    dot.edge('F', 'G', label='Yes')
    dot.edge('F', 'H', label='No')
    dot.edge('G', 'E')
    dot.edge('H', 'I')
    dot.edge('I', 'J')

    dot.render('execute_code_workflow', format='png', cleanup=True)
    print("Execute Code Workflow saved as 'execute_code_workflow.png'.")

def parse_response_flowchart():
    dot = Digraph(comment='Parse Response Workflow')

    dot.node('A', 'Start')
    dot.node('B', 'Clean response')
    dot.node('C', 'Split response into parts')
    dot.node('D', 'Iterate over parts and parse into key-value pairs')
    dot.node('E', 'Return parsed dictionary')
    dot.node('F', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C')
    dot.edge('C', 'D')
    dot.edge('D', 'E')
    dot.edge('E', 'F')

    dot.render('parse_response_workflow', format='png', cleanup=True)
    print("Parse Response Workflow saved as 'parse_response_workflow.png'.")

def format_response_flowchart():
    dot = Digraph(comment='Format Response Workflow')

    dot.node('A', 'Start')
    dot.node('B', 'Parse response to get dictionary')
    dot.node('C', 'Print question')
    dot.node('D', 'Split and format Python code and execution result')
    dot.node('E', 'Print Python code')
    dot.node('F', 'Print execution result')
    dot.node('G', 'Print conclusion response')
    dot.node('H', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C')
    dot.edge('C', 'D')
    dot.edge('D', 'E')
    dot.edge('E', 'F')
    dot.edge('F', 'G')
    dot.edge('G', 'H')

    dot.render('format_response_workflow', format='png', cleanup=True)
    print("Format Response Workflow saved as 'format_response_workflow.png'.")

# Run all flowchart generation functions

#extract_code_flowchart()
#execute_code_flowchart()
#parse_response_flowchart()
#format_response_flowchart()



def main_flowchart():
    dot = Digraph(comment='Main Function Workflow')

    dot.node('A', 'Start')
    dot.node('M', "User's query")
    dot.node('B', 'Read DataFrame from CSV file')
    dot.node('C', 'Initialize Retriever with parameters')
    dot.node('D', 'Initialize Code Model with parameters')
    dot.node('E', 'Get prompt using combined template')
    dot.node('F', 'Initialize CodeRAGAgent')
    dot.node('G', 'Get prompt using interp template')
    dot.node('N', 'Initialize Interpretation Model with parameters')
    dot.node('H', 'Initialize InterpRAGAgent')
    dot.node('I', 'Process query through CodeRAGAgent')
    dot.node('J', 'Process generated code through InterpRAGAgent')
    dot.node('K', 'Print format response')
    dot.node('L', 'End')

    dot.edge('A', 'B')
    dot.edge('A', 'M')
    dot.edge('A', 'C')
    dot.edge('A', 'D')
    dot.edge('A', 'E')
    dot.edge('A', 'G')
    dot.edge('A', 'N')
    dot.edge('B', 'F')
    dot.edge('C', 'F')
    dot.edge('D', 'F')
    dot.edge('E', 'F')
    dot.edge('N', 'H')
    dot.edge('G', 'H')
    dot.edge('F', 'I')
    dot.edge('M', 'I')
    dot.edge('I', 'J')
    dot.edge('M', 'J')
    dot.edge('H', 'J')
    dot.edge('J', 'K')
    dot.edge('K', 'L')

    dot.render('main_function_workflow', format='png', cleanup=True)
    print("Main Function Workflow saved as 'main_function_workflow.png'.")


#main_flowchart()



def model_invoke_flowchart():
    dot = Digraph(comment='Model Invoke Method Workflow')

    dot.node('A', 'Start')
    dot.node('B', 'Check if model_name contains "-"')
    dot.node('C', 'Call remote_model(prompt)')
    dot.node('D', 'Call local_model(prompt)')
    dot.node('E', 'Return result from remote_model')
    dot.node('F', 'Return result from local_model')
    dot.node('G', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C', label='Yes')
    dot.edge('B', 'D', label='No')
    dot.edge('C', 'E')
    dot.edge('D', 'F')
    dot.edge('E', 'G')
    dot.edge('F', 'G')

    dot.render('model_invoke_workflow', format='png', cleanup=True)
    print("Model Invoke Method Workflow saved as 'model_invoke_workflow.png'.")

# Run the Model invoke method workflow chart generation
#model_invoke_flowchart()



def retriever_retrieve_schema_flowchart():
    dot = Digraph(comment='Retriever Retrieve Schema Method Workflow')

    # Main retrieve_schema workflow
    dot.node('A', 'Start')
    dot.node('B', 'Build schema corpus from DataFrame')
    dot.node('C', 'Get retriever based on mode')
    dot.node('D', 'Invoke retriever with query')
    dot.node('E', 'Evaluate results?')
    dot.node('F', 'Return retrieved column names')
    dot.node('G', 'Return all retrieved information')
    dot.node('H', 'End')

    # get_retriever workflow
    dot.node('I', 'Check retrieval mode')
    dot.node('J', 'Return embed retriever')
    dot.node('K', 'Return BM25 retriever')
    dot.node('L', 'Return hybrid retriever')

    # Edges for retrieve_schema workflow
    dot.edge('A', 'B')
    dot.edge('B', 'C')
    dot.edge('C', 'I')
    dot.edge('I', 'J', label='embed')
    dot.edge('I', 'K', label='bm25')
    dot.edge('I', 'L', label='hybrid')
    dot.edge('J', 'D')
    dot.edge('K', 'D')
    dot.edge('L', 'D')
    dot.edge('D', 'E')
    dot.edge('E', 'F', label='Yes')
    dot.edge('E', 'G', label='No')
    dot.edge('F', 'H')
    dot.edge('G', 'H')

    dot.render('retriever_workflow', format='png', cleanup=True)
    print("Retriever Retrieve Schema Method Workflow saved as 'retriever_retrieve_schema_workflow.png'.")

# Run the Retriever retrieve_schema method workflow chart generation
#retriever_retrieve_schema_flowchart()

